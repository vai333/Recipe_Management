package net.javaguides.springboot.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.javaguides.springboot.respository.RecipeRepository;
import net.javaguides.springboot.exception.ResourceNotFoundException;
import net.javaguides.springboot.model.Recipe;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/v1/")
public class RecipeController {

	@Autowired
	private RecipeRepository recipeRepository;
	
	// we are going to get details of all employees from here
	
	@GetMapping("/recipes")
	@CrossOrigin( origins = "http://localhost:4200")
	public List<Recipe> getAllRecipes(){
		return recipeRepository.findAll();
	}
	
	// creating employee rest api 
	@PostMapping("/recipes")
	public Recipe createrecipe(@RequestBody Recipe recipe) {
		return recipeRepository.save(recipe);
	}
	
	// get employee by id rest api
		@GetMapping("/recipes/{id}")
		public ResponseEntity<Recipe> getRecipeById(@PathVariable Long id) {
			Recipe recipe = recipeRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException("Recipe does not exist with id :" + id));
			return ResponseEntity.ok(recipe);
		}
		
		// update employee rest api
		
		@PutMapping("/recipe/{id}")
		public ResponseEntity<Recipe> updateRecipe(@PathVariable Long id, @RequestBody Recipe recipeDetails){
			Recipe recipe= recipeRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException("Recipe does not exist with id :" + id));
			
			recipe.setRecipeName(recipeDetails.getRecipeName());
			recipe.setTime(recipeDetails.getTime());
			recipe.setIngredients(recipeDetails.getIngredients());
			
			Recipe updatedRecipe = recipeRepository.save(recipe);
			return ResponseEntity.ok(updatedRecipe);
		}
		
		// delete employee rest api
		@DeleteMapping("/recipe/{id}")
		public ResponseEntity<Map<String, Boolean>> deleteEmployee(@PathVariable Long id){
			Recipe recipe = recipeRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException("recipe does not exist with id :" + id));
			
			recipeRepository.delete(recipe);
			Map<String, Boolean> response = new HashMap<>();
			response.put("deleted", Boolean.TRUE);
			return ResponseEntity.ok(response);
		}
		
		
	}
}
